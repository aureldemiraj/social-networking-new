// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(uuid())
  fullName             String               @db.VarChar(100)
  email                String               @unique
  password             String
  birthDate            DateTime             @db.Date
  registeredDate       DateTime             @default(now())
  education            String?              @db.VarChar(250)
  passwordResetToken   String?
  passwordResetExpires DateTime?
  role                 Role                 @default(USER)
  eventsOrganized      Event[]
  communities          UsersOnCommunities[]
  subscriptions        EventSubscribers[]
  posts                Post[]

  @@map("users")
}

model Community {
  id          String               @id @default(uuid())
  name        String               @unique
  description String
  createdDate DateTime             @default(now())
  events      Event[]
  users       UsersOnCommunities[]
  posts       Post[]

  @@map("communities")
}

model Event {
  id             String             @id @default(uuid())
  name           String             @db.VarChar(100)
  description    String             @db.VarChar(500)
  location       String
  organizer      User               @relation(fields: [eventOrganizer], references: [id], onDelete: Cascade)
  eventOrganizer String
  community      Community          @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId    String
  eventTime      DateTime
  createdTime    DateTime           @default(now())
  subscribers    EventSubscribers[]

  @@map("events")
}

model UsersOnCommunities {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  joinedAt    DateTime  @default(now())

  @@id(name: "communityUsers", fields: [userId, communityId])
  @@map("users_on_communities")
}

model EventSubscribers {
  event        Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId      String
  subscriber   User   @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  subscriberId String

  @@id(name: "eventSubscribers", [eventId, subscriberId])
  @@map("event_subscribers")
}

model Post {
  id          String    @id @default(uuid())
  title       String
  body        String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  createdTime DateTime  @default(now())

  @@map("posts")
}

enum Role {
  USER
  ADMIN
}
